{"version":3,"sources":["components/TaskList/TaskList.jsx","components/Modal/Modal.jsx","utils/utils.js","components/Day/Day.jsx","components/Calendar/Calendar.jsx","components/Arrow/Arrow.jsx","components/Header/Header.jsx","components/Main/Main.jsx","components/App/App.js","index.js"],"names":["TaskList","day","actuallyDate","fetchMonth","actuallyMonth","actuallyYear","useState","isMaxTasks","setIsMaxTasks","removeTask","a","useEffect","events","length","className","onClick","map","event","id","_id","title","body","e","target","url","fetch","method","dayId","Modal","isDisplay","modalOverlayBackground","useRef","current","addEventListener","removeEventListener","titleTask","setTitleTask","bodyTask","setBodyTask","addTask","task","JSON","stringify","headers","response","json","ref","date","disabled","htmlFor","value","placeholder","type","onChange","DAYS_OF_WEEK","MONTHS_OF_YEAR","Day","isShowModal","setIsShowModal","currentDateOfDay","actuallyDay","slice","replace","indexDayOfWeek","Date","getDay","isEventOnDay","isSundayDay","Calendar","renderDays","Arrow","setCurrentMonth","setCurrentYear","currentMonth","currentYear","setPreviousMonth","setNextMonth","Header","getMonth","getFullYear","Main","App","setActuallyMonth","month","year","then","data","days","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0027afbe.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./style.scss\";\r\n\r\nconst TaskList = ({\r\n  day,\r\n  actuallyDate,\r\n  fetchMonth,\r\n  actuallyMonth,\r\n  actuallyYear,\r\n}) => {\r\n  const removeTaskUrl = \"https://calendar-app-szadziu.herokuapp.com/api/event/\";\r\n\r\n  const [isMaxTasks, setIsMaxTasks] = useState(false);\r\n\r\n  const checkAmountOfTasks = () => {\r\n    if (day.events.length > 10) setIsMaxTasks(true);\r\n  };\r\n\r\n  const removeTask = async () => {\r\n    await fetchMonth(actuallyMonth, actuallyYear);\r\n  };\r\n\r\n  useEffect(() => checkAmountOfTasks(), []);\r\n\r\n  return (\r\n    <div className=\"task-list-container\">\r\n      Lista wydarzeń:\r\n      <ul className=\"task-list\">\r\n        {isMaxTasks && (\r\n          <div className=\"info-modal\">\r\n            Zmniejsz ilość wydarzeń na ten dzień !\r\n            <button onClick={() => setIsMaxTasks(false)}>OK</button>\r\n          </div>\r\n        )}\r\n        {day.events.map((event) => (\r\n          <li key={day.dayId} id={event._id} className=\"task\">\r\n            <h2>{event.title}</h2>\r\n            <p>{event.body}</p>\r\n            <button\r\n              className=\"remove-task-button\"\r\n              id={event._id}\r\n              onClick={async (e) => {\r\n                if (e.target.id === event._id) {\r\n                  const url = `${removeTaskUrl}${actuallyDate}/${e.target.id}`;\r\n                  await fetch(url, { method: \"DELETE\" });\r\n                  await removeTask();\r\n                }\r\n              }}\r\n            >\r\n              usuń\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport TaskList from \"../TaskList\";\r\nimport \"./style.scss\";\r\n\r\nconst Modal = ({\r\n  day,\r\n  isDisplay,\r\n  actuallyDate,\r\n  fetchMonth,\r\n  actuallyMonth,\r\n  actuallyYear,\r\n}) => {\r\n  const modalOverlayBackground = useRef(null);\r\n\r\n  useEffect(() => {\r\n    modalOverlayBackground.current.addEventListener(\"click\", () =>\r\n      isDisplay(false)\r\n    );\r\n    return modalOverlayBackground.current.removeEventListener(\"click\", () =>\r\n      isDisplay(false)\r\n    );\r\n  }, []);\r\n\r\n  const [titleTask, setTitleTask] = useState(\"\");\r\n  const [bodyTask, setBodyTask] = useState(\"\");\r\n\r\n  const addTask = async (task) => {\r\n    const response = await fetch(\r\n      `https://calendar-app-szadziu.herokuapp.com/api/event/${actuallyDate}`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(task),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    await fetchMonth(actuallyMonth, actuallyYear);\r\n    return response.json();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div ref={modalOverlayBackground} className=\"modal-overlay\"></div>\r\n      <div className=\"modal-calendar\">\r\n        <p>{`Wybrana data to: ${day.date}`}</p>\r\n        <p>{`Masz ${day.events.length} wydarzeń na ten dzień`}</p>\r\n        <button\r\n          disabled={!(titleTask.length > 2) || !(bodyTask.length > 2)}\r\n          className=\"add-button-modal\"\r\n          onClick={() => {\r\n            addTask({ title: titleTask, body: bodyTask });\r\n            setTitleTask(\"\");\r\n            setBodyTask(\"\");\r\n          }}\r\n        >\r\n          dodaj wydarzenie\r\n        </button>\r\n        <label className=\"title-label\" htmlFor=\"title\">\r\n          Tytuł\r\n        </label>\r\n        <input\r\n          className=\"inputTask\"\r\n          value={titleTask}\r\n          id=\"title\"\r\n          placeholder=\"wpisz tytuł\"\r\n          type=\"text\"\r\n          onChange={({ target: { value } }) => setTitleTask(value)}\r\n        />\r\n        <label className=\"body-label\" htmlFor=\"body\">\r\n          Opis\r\n        </label>\r\n        <input\r\n          className=\"inputTask\"\r\n          value={bodyTask}\r\n          id=\"body\"\r\n          placeholder=\"wpisz treść\"\r\n          type=\"text\"\r\n          onChange={({ target: { value } }) => setBodyTask(value)}\r\n        />\r\n        <TaskList\r\n          fetchMonth={fetchMonth}\r\n          actuallyMonth={actuallyMonth}\r\n          actuallyYear={actuallyYear}\r\n          actuallyDate={actuallyDate}\r\n          day={day}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","export const URL_GET_MONTH =\r\n  \"https://calendar-app-szadziu.herokuapp.com/api/month/\";\r\n\r\nexport const DAYS_OF_WEEK = [\r\n  \"Niedziela\",\r\n  \"Poniedziałek\",\r\n  \"Wtorek\",\r\n  \"Środa\",\r\n  \"Czwartek\",\r\n  \"Piątek\",\r\n  \"Sobota\",\r\n  \"Niedziela\",\r\n];\r\n\r\nexport const MONTHS_OF_YEAR = [\r\n  \"Styczeń\",\r\n  \"Luty\",\r\n  \"Marzec\",\r\n  \"Kwiecień\",\r\n  \"Maj\",\r\n  \"Czerwiec\",\r\n  \"Lipiec\",\r\n  \"Sierpień\",\r\n  \"Wrzesień\",\r\n  \"Październik\",\r\n  \"Listopad\",\r\n  \"Grudzień\",\r\n];\r\n","import { useState } from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport { DAYS_OF_WEEK } from \"../../utils/utils\";\r\nimport \"./style.scss\";\r\n\r\nconst Day = ({ day, fetchMonth }) => {\r\n  const [isShowModal, setIsShowModal] = useState(false);\r\n  const currentDateOfDay = {\r\n    actuallyDay: day.date.slice(0, 2).replace(\"-\", \"\") * 1 - 1,\r\n    actuallyMonth:\r\n      day.date.slice(-7, -4).replace(\"-\", \"\").replace(\"-\", \"\") * 1 - 1,\r\n    actuallyYear: day.date.slice(-4),\r\n  };\r\n  const { actuallyDay, actuallyMonth, actuallyYear } = currentDateOfDay;\r\n  const actuallyDate = `${actuallyDay}/${actuallyMonth}/${actuallyYear}`;\r\n  const indexDayOfWeek =\r\n    new Date(actuallyYear, actuallyMonth, actuallyDay).getDay() + 1;\r\n  const isEventOnDay = day.events.length && \"isEventOn\";\r\n  const isSundayDay = indexDayOfWeek === 7 ? \"isSundayDay\" : \"isDayOfWeek\";\r\n  return (\r\n    <div\r\n      className=\"day-calendar\"\r\n      onClick={() => {\r\n        setIsShowModal(true);\r\n      }}\r\n    >\r\n      <p className=\"number-day-calendar\">\r\n        {day.date.slice(0, 2).replace(\"-\", \"\")}\r\n      </p>\r\n      <p className={isSundayDay}>{DAYS_OF_WEEK[indexDayOfWeek]}</p>\r\n      <p className={isEventOnDay}>Wydarzenia: {day.events.length}</p>\r\n      {isShowModal && (\r\n        <Modal\r\n          fetchMonth={fetchMonth}\r\n          actuallyMonth={actuallyMonth}\r\n          actuallyYear={actuallyYear}\r\n          actuallyDate={actuallyDate}\r\n          isDisplay={setIsShowModal}\r\n          day={day}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import Day from \"../Day\";\r\nimport \"./style.scss\";\r\n\r\nconst Calendar = ({ actuallyMonth, fetchMonth }) => {\r\n  const renderDays = actuallyMonth.map((day) => (\r\n    <Day fetchMonth={fetchMonth} key={day.dayId} day={day} />\r\n  ));\r\n\r\n  return <>{<div className=\"main-calendar\">{renderDays}</div>}</>;\r\n};\r\n\r\nexport default Calendar;\r\n","import \"./style.scss\";\r\n\r\nconst Arrow = ({\r\n  setCurrentMonth,\r\n  setCurrentYear,\r\n  currentMonth,\r\n  currentYear,\r\n}) => {\r\n  const setPreviousYear = () => {\r\n    setCurrentYear(currentYear - 1);\r\n  };\r\n\r\n  const setNextYear = () => {\r\n    setCurrentYear(currentYear + 1);\r\n  };\r\n\r\n  const setPreviousMonth = () => {\r\n    if (currentMonth <= 0) {\r\n      setCurrentMonth(11);\r\n      setPreviousYear();\r\n    } else setCurrentMonth(currentMonth - 1);\r\n  };\r\n\r\n  const setNextMonth = () => {\r\n    if (currentMonth >= 11) {\r\n      setCurrentMonth(0);\r\n      setNextYear();\r\n    } else setCurrentMonth(currentMonth + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"arrows-container\">\r\n      <div onClick={() => setNextMonth()} className=\"arrow\">\r\n        <div className=\"arrow-top\"></div>\r\n        <div className=\"arrow-bottom\"></div>\r\n      </div>\r\n      <div onClick={() => setPreviousMonth()} className=\"arrow arrow-left\">\r\n        <div className=\"arrow-top\"></div>\r\n        <div className=\"arrow-bottom\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Arrow;\r\n","import { useEffect, useState } from \"react\";\r\nimport Arrow from \"../Arrow\";\r\nimport { MONTHS_OF_YEAR } from \"../../utils/utils\";\r\nimport \"./style.scss\";\r\n\r\nconst Header = ({ fetchMonth }) => {\r\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\r\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\r\n  useEffect(() => fetchMonth(currentMonth, currentYear), [currentMonth]);\r\n\r\n  return (\r\n    <header className=\"header-calendar\">\r\n      <h1 className=\"month-calendar\">{`${MONTHS_OF_YEAR[currentMonth]} ${currentYear}`}</h1>\r\n      <Arrow\r\n        currentMonth={currentMonth}\r\n        currentYear={currentYear}\r\n        setCurrentYear={setCurrentYear}\r\n        setCurrentMonth={setCurrentMonth}\r\n      />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import Calendar from \"../Calendar/Calendar\";\r\nimport Header from \"../Header\";\r\nimport \"./style.scss\";\r\n\r\nconst Main = ({ actuallyMonth, fetchMonth }) => {\r\n  return (\r\n    <div className=\"main-container\">\r\n      <Header fetchMonth={fetchMonth} />\r\n      <Calendar fetchMonth={fetchMonth} actuallyMonth={actuallyMonth} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { useState } from \"react\";\nimport Main from \"../Main\";\nimport { URL_GET_MONTH } from \"../../utils/utils\";\n\nconst App = () => {\n  const [actuallyMonth, setActuallyMonth] = useState([]);\n  const fetchMonth = (month, year) => {\n    fetch(`${URL_GET_MONTH}${month}/${year}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setActuallyMonth(data.data.days);\n      });\n  };\n\n  return (\n    <div>\n      <Main actuallyMonth={actuallyMonth} fetchMonth={fetchMonth} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}